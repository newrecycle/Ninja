name: Build and Package Ninja

# This workflow builds the Ninja application on Windows using .NET 8 and WPF,
# then compiles the installer using Inno Setup and uploads the resulting
# installer executable as a build artifact.

on:
  # Trigger the workflow whenever code is pushed to the default branch or a pull
  # request is opened. You can also manually run it via the GitHub UI using
  # the workflow_dispatch event.
  push:
    branches:
      - master
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 60
    steps:
      # Check out the repository and its submodules. Ninja uses submodules for
      # shared libraries, so set `submodules: true` to ensure they are cloned.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      # Install the required .NET SDK. Ninja targets .NET 8, so specify
      # '8.0.x' to automatically pull the latest patch version. On Windows
      # runners this also enables building WPF applications.
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Install Inno Setup via Chocolatey. The `choco` package manager is
      # available on the GitHub-hosted Windows images. Inno Setup is used
      # to build the installer executable from the application binaries.
      - name: Install Inno Setup
        run: |
          choco install -y innosetup
        shell: powershell

      # Restore NuGet dependencies for the solution. Use the `dotnet` CLI to
      # restore packages for all projects in the solution. The solution file
      # lives under the `Source` directory, so adjust the path accordingly.
      - name: Restore dependencies
        # Restore NuGet packages for the solution. The solution file is in
        # the repository root (Ninja.sln), so use that path instead of
        # the non‑existent Source\Ninja.sln.
        run: |
          dotnet restore .\Ninja.sln
        shell: powershell

      # Build the Ninja solution in Release mode. Passing `--no-restore`
      # assumes that restore has already been performed in the previous step.
      - name: Build solution
        # Build the solution in Release mode. Use --no-restore since restore
        # has already been performed.
        run: |
          dotnet build .\Ninja.sln --configuration Release --no-restore
        shell: powershell

      # Compile the installer using Inno Setup. First locate the .iss script
      # in the repository. If multiple scripts exist, the first one found is
      # used. Then locate the ISCC compiler and invoke it against the script.
      # The Inno Setup compiler produces an .exe installer by default. If no
      # script is found, the workflow fails with an explicit error.
      - name: Build installer
        run: |
          # Find the Inno Setup script (.iss) file
          $iss = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Filter '*.iss' -Recurse | Select-Object -First 1
          if (-not $iss) {
            Write-Error "No Inno Setup (.iss) script found in the repository."
            exit 1
          }

          # Determine the path to the Inno Setup Compiler (ISCC.exe)
          $isccPath = (Get-Command iscc.exe -ErrorAction SilentlyContinue).Source
          if (-not $isccPath) {
            # Use the default install location if `iscc.exe` isn't on the PATH
            $isccPath = "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe"
          }

          Write-Host "Using Inno Setup script: $($iss.FullName)"
          Write-Host "Using Inno Setup compiler: $isccPath"

          & $isccPath $iss.FullName
        shell: powershell

      # Upload any installer executables generated by the previous step. The
      # Inno Setup compiler typically writes output to the same directory as
      # the script or into an Output subdirectory. Use a glob pattern to
      # capture .exe files. The `if-no-files-found: error` option makes
      # the step fail if no installers are found, catching misconfigurations.
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: ninja-installer
          path: |
            **\*.exe
          if-no-files-found: error
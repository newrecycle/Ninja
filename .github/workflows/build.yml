name: Build & Package Ninja (.NET 8 WPF, win-x64)

on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    env:
      # Base64-encoded Inno Setup script. We substitute __APPVER__, __APPGUID__, __PUBDIR__ at runtime.
      INNO_ISS_B64: |
        I2RlZmluZSBNeUFwcE5hbWUgIk5pbmphIgojZGVmaW5lIE15QXBwVmVyc2lvbiAiX19BUFBWRVJf
        XyIKI2RlZmluZSBNeUFwcFB1Ymxpc2hlciAibmV3cmVjeWNsZSIKI2RlZmluZSBNeUFwcEV4ZU5h
        bWUgIk5pbmphLmV4ZSIKCltTZXR1cF0KQXBwSWQ9e3tfX0FQUEdVSURfX319CkFwcE5hbWU9eyNN
        eUFwcE5hbWV9CkFwcFZlcnNpb249eyNNeUFwcFZlcnNpb259CkFwcFB1Ymxpc2hlcj17I015QXBw
        UHVibGlzaGVyfQpEZWZhdWx0RGlyTmFtZT17cGZ9XHsjTXlBcHBOYW1lfQpEZWZhdWx0R3JvdXBO
        YW1lPXsjTXlBcHBOYW1lfQpEaXNhYmxlUHJvZ3JhbUdyb3VwUGFnZT15ZXMKT3V0cHV0RGlyPXsj
        U291cmNlUGF0aH1cb3V0cHV0Ck91dHB1dEJhc2VGaWxlbmFtZT1OaW5qYS1TZXR1cC14NjQKQ29t
        cHJlc3Npb249bHptYQpTb2xpZENvbXByZXNzaW9uPXllcwpBcmNoaXRlY3R1cmVzQWxsb3dlZD14
        NjQKQXJjaGl0ZWN0dXJlc0luc3RhbGxJbjY0Qml0TW9kZT14NjQKCltGaWxlc10KU291cmNlOiAi
        X19QVUJESVJfX1wqIjsgRGVzdERpcjogInthcHB9IjsgRmxhZ3M6IHJlY3Vyc2VzdWJkaXJzIGNy
        ZWF0ZWFsbHN1YmRpcnMKCltJY29uc10KTmFtZTogIntncm91cH1cTmluamEiOyBGaWxlbmFtZTog
        InthcHB9XE5pbmphLmV4ZSIKTmFtZTogIntjb21tb25kZXNrdG9wfVxOaW5qYSI7IEZpbGVuYW1l
        OiAie2FwcH1cTmluamEuZXhlIjsgVGFza3M6IGRlc2t0b3BpY29uCgpbVGFza3NdCk5hbWU6ICJk
        ZXNrdG9waWNvbiI7IERlc2NyaXB0aW9uOiAiQ3JlYXRlIGEgJmRlc2t0b3AgaWNvbiI7IEdyb3Vw
        RGVzY3JpcHRpb246ICJBZGRpdGlvbmFsIGljb25zOiIK

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        shell: pwsh
        run: dotnet restore .\Ninja.sln

      - name: Build (Release)
        shell: pwsh
        run: >
          dotnet build .\Ninja.sln -c Release --no-restore
          /p:NoWarn=1591

      - name: Publish self-contained (win-x64)
        id: publish
        shell: pwsh
        run: |
          $proj = "Ninja\Ninja.csproj"
          dotnet publish $proj -c Release -r win-x64 --self-contained true `
            /p:PublishTrimmed=false `
            /p:PublishSingleFile=false `
            /p:IncludeNativeLibrariesForSelfExtract=true `
            /p:NoWarn=1591
          $pub = Get-ChildItem -Directory -Recurse -Path Ninja\bin\Release `
            | Where-Object { $_.Name -ieq "publish" -and $_.FullName -like "*win-x64*" -and $_.FullName -like "*net8.0-windows*" } `
            | Select-Object -Last 1 -ExpandProperty FullName
          if (-not $pub) { throw "Publish directory not found." }
          "publishDir=$pub" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Zip publish output
        id: zip
        shell: pwsh
        run: |
          $zip = "$env:RUNNER_TEMP\Ninja-win-x64-publish.zip"
          $pub = "${{ steps.publish.outputs.publishDir }}"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path "$pub\*" -DestinationPath $zip
          "zipPath=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Install Inno Setup
        shell: pwsh
        run: choco install -y innosetup

      - name: Decode and finalize Inno Setup script
        id: iss
        shell: pwsh
        run: |
          $pub = "${{ steps.publish.outputs.publishDir }}"
          $exe = Join-Path $pub "Ninja.exe"
          if (-not (Test-Path $exe)) { throw "Ninja.exe not found in $pub" }
          $ver = (Get-Item $exe).VersionInfo.ProductVersion
          if (-not $ver) { $ver = "1.0.0" }
          $guid = [guid]::NewGuid().ToString()
          $dist = "$env:RUNNER_TEMP\dist"
          New-Item -ItemType Directory -Force -Path $dist | Out-Null
          $issPath = Join-Path $dist "NinjaSetup.iss"
          $b64 = ($env:INNO_ISS_B64 -replace '\s','')
          [IO.File]::WriteAllBytes($issPath, [Convert]::FromBase64String($b64))
          $content = Get-Content -Raw -Path $issPath
          $content = $content.Replace("__APPVER__", $ver).Replace("__APPGUID__", $guid).Replace("__PUBDIR__", $pub)
          Set-Content -Path $issPath -Encoding UTF8 -Value $content
          "issPath=$issPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Build installer (ISCC)
        id: iscc
        shell: pwsh
        run: |
          $iss = "${{ steps.iss.outputs.issPath }}"
          $iscc = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (-not (Test-Path $iscc)) { throw "ISCC.exe not found at $iscc" }
          & "$iscc" "$iss"
          $out = Join-Path (Split-Path $iss) "output"
          if (-not (Test-Path $out)) { throw "Installer output folder not found." }
          $setup = Get-ChildItem -Path $out -Filter "Ninja-Setup-x64*.exe" | Select-Object -Last 1
          if (-not $setup) { throw "Installer EXE not found." }
          "setupPath=$($setup.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload publish zip
        uses: actions/upload-artifact@v4
        with:
          name: Ninja-win-x64-publish
          path: ${{ steps.zip.outputs.zipPath }}
          if-no-files-found: error

      - name: Upload setup EXE
        uses: actions/upload-artifact@v4
        with:
          name: Ninja-Setup-x64
          path: ${{ steps.iscc.outputs.setupPath }}
          if-no-files-found: error
